Jeffs notes on using Salt
* Targeting nodes
There are several ways to name which nodes to affect.  As well, these can be combined using a _type_ ~@~ prefix with boolean operators.  Eg:
#+BEGIN_SRC bash
salt -C 'G@os:Ubuntu and I@role:web and S@192.168.100.0/24' test.ping
#+END_SRC
Note the use of ~-C~ for Compound targeting

Here is the table of type target types and what they affect
| Prefix | Target type                   |
|--------+-------------------------------|
| G      | Grains                        |
| E      | PCRE over minion id           |
| P      | PCRE over grains              |
| L      | explicit comma separated list |
| I      | Pillar                        |
| J      | PCR over Pillar               |
| S      | Subnet / IPv4 CIDR            |
| R      | SECO range                    |

** batch size
Additionally, one can control how many of the matched hosts are operated on at a time using ~--batch-size~, which can be an integer or a %.

Here 10 machines at a time are pinged
#+BEGIN_SRC bash
salt '*' -b 10 test.ping
#+END_SRC
and here we restart the web servers in a rolling 25% window
#+BEGIN_SRC bash
salt -G 'os:RedHat' --batch-size 25% apache.signal restart
#+END_SRC

** Nodegroups
Alternatively, one can configure named sets of nodes in the master config file.  As an example:
#+BEGIN_SRC yaml
nodegroups:
    webdev:  'I@role:web and G:cluster:dev'
    webqa:   'I@role:web and G:cluster:qa'
    webprod: 'I@role:web and G:cluster:prod'
#+END_SRC
Then use ~-N~ to target these nodes
#+BEGIN_SRC bash
salt -N webqa test.ping
#+END_SRC
* Dependencies with require, prereq
Here is an example that ensures the config file is installed before the service gets installed (and started by the OS).
#+BEGIN_SRC salt
apache2:
  pkg:
    - installed
    - require:
      - file: apache2
  service:
    - running
    - require:
      - pkg: apache2
  file:
    - managed
    - name /etc/apache2/apache2.conf
    - source: salt://apache2/apache2.conf
#+END_SRC
and here is an example that will shutdown and then restart apache if the codebase it is serving changes
#+BEGIN_SRC salt
apache2:
  service:
    - running
    - watch:
        file: codebase

codebase:
  - file:
    - recurse
    # etc

shutdown_apache2:
  service:
    - dead
    - name: apache2
    - prereq:
      - file: codebase
#+END_SRC
When evaluating the /shutdown_apache2/ state, salt will follow the /prereq/ clause.
If the codebase production triggers an update, then the shutdown_apache production will be executed before the codebase production.
Apache will be restarted by the watch on apache2.

The ~extend~ block is often used to specialize generic servicetemplates.
* Grains, pillars and templates
Grains are defined by the minion; they are specific to the minion.
Pillars are defined on the server.
Either can be defined statically or dynamically.
However, in practice, grains are more typically used for info that is not likely to change.
Pillars tend to be more dynamic info.

** Grains
Grains are loaded at minion startup, and cached in RAM.

To see the grains on minion, use ~grains.items~
#+BEGIN_SRC bash
salt myminion grains.items
#+END_SRC
and to see a single grain
#+BEGIN_SRC sh
salt myminion grains.item os_family
#+END_SRC

Grains are typically stored in ~/etc/salt/grains~ on a minion.
This file is re-written by salt periodically.

To add or modify a value in the grains file, use ~setval~
#+BEGIN_SRC bash
salt myminion grains.setval mygrain 42
#+END_SRC

There is also ~grains.append~ to add to a grain that is a list, and ~grains.delval~ to delete.
** Pillars
Pillars are server side, and are typically in ~/srv/pillar/~.
~pillar.items~ will show all of the pillar data.

By default, minions can only see the pillar state they are configured for.
Ie, minions cannot reference pillar state they do not participate in.
* Exploring the system state with salt modules
** mine
*** mine.valid
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* mine.valid
031.api3.expr.useast1.int.siftscience.com:
    ----------
    grains.items:
#+END_SRC
** hosts
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions hosts
031.api3.expr.useast1.int.siftscience.com:
    - hosts.add_host
    - hosts.get_alias
    - hosts.get_ip
    - hosts.has_pair
    - hosts.list_hosts
    - hosts.rm_host
    - hosts.set_host
#+END_SRC
** pillar
** ret
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions ret
031.api3.expr.useast1.int.siftscience.com:
    - ret.get_fun
    - ret.get_jid
    - ret.get_jids
    - ret.get_minions
#+END_SRC
** saltutil
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions saltutil
031.api3.expr.useast1.int.siftscience.com:
    - saltutil.clear_cache
    - saltutil.cmd
    - saltutil.cmd_iter
    - saltutil.find_cached_job
    - saltutil.find_job
    - saltutil.is_running
    - saltutil.kill_all_jobs
    - saltutil.kill_job
    - saltutil.mmodule
    - saltutil.pillar_refresh
    - saltutil.refresh_beacons
    - saltutil.refresh_grains
    - saltutil.refresh_modules
    - saltutil.refresh_pillar
    - saltutil.regen_keys
    - saltutil.revoke_auth
    - saltutil.runner
    - saltutil.running
    - saltutil.signal_job
    - saltutil.sync_all
    - saltutil.sync_beacons
    - saltutil.sync_engines
    - saltutil.sync_grains
    - saltutil.sync_log_handlers
    - saltutil.sync_modules
    - saltutil.sync_output
    - saltutil.sync_outputters
    - saltutil.sync_pillar
    - saltutil.sync_proxymodules
    - saltutil.sync_renderers
    - saltutil.sync_returners
    - saltutil.sync_sdb
    - saltutil.sync_states
    - saltutil.sync_utils
    - saltutil.term_all_jobs
    - saltutil.term_job
    - saltutil.update
    - saltutil.wheel
#+END_SRC
** service
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions service
031.api3.expr.useast1.int.siftscience.com:
    - service.available
    - service.disable
    - service.disabled
    - service.enable
    - service.enabled
    - service.execs
    - service.force_reload
    - service.get_all
    - service.get_disabled
    - service.get_enabled
    - service.get_running
    - service.get_static
    - service.mask
    - service.masked
    - service.missing
    - service.reload
    - service.restart
    - service.show
    - service.start
    - service.status
    - service.stop
    - service.systemctl_reload
    - service.unmask
#+END_SRC
** slsutil
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions slsutil
031.api3.expr.useast1.int.siftscience.com:
    - slsutil.merge
    - slsutil.renderer
    - slsutil.update
#+END_SRC
** state
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions state
031.api3.expr.useast1.int.siftscience.com:
    - state.apply
    - state.check_request
    - state.clear_cache
    - state.clear_request
    - state.disable
    - state.enable
    - state.event
    - state.high
    - state.highstate
    - state.list_disabled
    - state.low
    - state.orchestrate
    - state.pkg
    - state.request
    - state.run_request
    - state.running
    - state.show_highstate
    - state.show_low_sls
    - state.show_lowstate
    - state.show_sls
    - state.show_top
    - state.single
    - state.sls
    - state.sls_id
    - state.template
    - state.template_str
    - state.top
#+END_SRC
*** state.show_sls
#+BEGIN_SRC bash
[jmccarrell@master.salt.stg1.useast1] [~] $ sudo salt master.salt\* sys.doc state.show_sls
#+END_SRC
#+BEGIN_SRC bash
[jmccarrell@master.salt.stg1.useast1] [~] $ sudo salt 021\* state.show_sls dns.hosts_file
021.api.stg1.useast1.int.siftscience.com:
    ----------
    host_entry:
        ----------
        __env__:
            base
        __sls__:
            dns.hosts_file
        host:
            |_
              ----------
              name:
                  021.api.stg1.useast1.int.siftscience.com
            |_
              ----------
              ip:
                  10.0.11.135
            - present
            |_
              ----------
              order:
#+END_SRC
*** state.sls
#+BEGIN_SRC bash
[jmccarrell@master.salt.stg1.useast1] [~] $ sudo salt master.salt\* sys.doc state.sls
state.sls:

    Execute the states in one or more SLS files
#+END_SRC
looks like exactly what I am looking for.
ie, this example from the cli output I elided above
#+BEGIN_SRC bash
        salt '*' state.sls myslsfile pillar="{foo: 'Foo!', bar: 'Bar!'}"
#+END_SRC
** test module
*** test.versions_report
#+BEGIN_SRC bash
[jmccarrell@031.api3.expr.useast1] [~] $ sudo salt-call test.versions_report
local:
    Salt Version:
               Salt: 2016.11.9

    Dependency Versions:
               cffi: Not Installed
           cherrypy: Not Installed
           dateutil: 2.4.2
          docker-py: Not Installed
              gitdb: 0.6.4
          gitpython: 1.0.1
              ioflo: Not Installed
             Jinja2: 2.8
            libgit2: Not Installed
            libnacl: Not Installed
           M2Crypto: Not Installed
               Mako: 1.0.3
       msgpack-pure: Not Installed
     msgpack-python: 0.4.6
       mysql-python: Not Installed
          pycparser: Not Installed
           pycrypto: 2.6.1
       pycryptodome: Not Installed
             pygit2: Not Installed
             Python: 2.7.12 (default, Dec  4 2017, 14:50:18)
       python-gnupg: Not Installed
             PyYAML: 3.11
              PyZMQ: 15.2.0
               RAET: Not Installed
              smmap: 0.9.0
            timelib: Not Installed
            Tornado: 4.2.1
                ZMQ: 4.1.4

    System Versions:
               dist: Ubuntu 16.04 xenial
            machine: x86_64
            release: 4.4.0-1067-aws
             system: Linux
            version: Ubuntu 16.04 xenial
#+END_SRC
*** test.providers
#+BEGIN_SRC bash
[jmccarrell@031.api3.expr.useast1] [~] $ sudo salt-call test.providers
local:
    ----------
    aliases:
        aliases
    alternatives:
        alternatives
    aptpkg:
        pkg
    archive:
        archive
    artifactory:
        artifactory
    at:
        at
    aws_sqs:
        aws_sqs
    bcache:
        bcache
    beacons:
        beacons
    bigip:
        bigip
    blockdev:
        blockdev
    boto_apigateway:
        boto_apigateway
    boto_asg:
        boto_asg
    boto_cfn:
        boto_cfn
    boto_cloudtrail:
        boto_cloudtrail
    boto_cloudwatch:
        boto_cloudwatch
    boto_cloudwatch_event:
        boto_cloudwatch_event
    boto_cognitoidentity:
        boto_cognitoidentity
    boto_datapipeline:
        boto_datapipeline
    boto_dynamodb:
        boto_dynamodb
    boto_ec2:
        boto_ec2
    boto_elasticache:
        boto_elasticache
    boto_elasticsearch_domain:
        boto_elasticsearch_domain
    boto_elb:
        boto_elb
    boto_iam:
        boto_iam
    boto_iot:
        boto_iot
    boto_kms:
        boto_kms
    boto_lambda:
        boto_lambda
    boto_rds:
        boto_rds
    boto_route53:
        boto_route53
    boto_s3_bucket:
        boto_s3_bucket
    boto_secgroup:
        boto_secgroup
    boto_sns:
        boto_sns
    boto_sqs:
        boto_sqs
    boto_vpc:
        boto_vpc
    btrfs:
        btrfs
    cloud:
        cloud
    cmdmod:
        cmd
    composer:
        composer
    config:
        config
    consul:
        consul
    container_resource:
        container_resource
    cp:
        cp
    cpan:
        cpan
    cron:
        cron
    data:
        data
    debconfmod:
        debconf
    debian_ip:
        ip
    defaults:
        defaults
    devmap:
        devmap
    dictupdate:
        slsutil
    dig:
        dig
    disk:
        disk
    djangomod:
        django
    dnsmasq:
        dnsmasq
    dnsutil:
        dnsutil
    dpkg:
        lowpkg
    drbd:
        drbd
    elasticsearch:
        elasticsearch
    environ:
        environ
    etcd_mod:
        etcd
    ethtool:
        ethtool
    event:
        event
    extfs:
        extfs
    file:
        file
    gem:
        gem
    genesis:
        genesis
    git:
        git
    grains:
        grains
    groupadd:
        group
    grub_legacy:
        grub
    hashutil:
        hashutil
    hipchat:
        hipchat
    hosts:
        hosts
    http:
        http
    img:
        img
    incron:
        incron
    infoblox:
        infoblox
    ini_manage:
        ini
    inspector:
        inspector
    introspect:
        introspect
    iptables:
        iptables
    jboss7:
        jboss7
    jboss7_cli:
        jboss7_cli
    k8s:
        k8s
    key:
        key
    keyboard:
        keyboard
    kmod:
        kmod
    linux_acl:
        acl
    linux_lvm:
        lvm
    linux_sysctl:
        sysctl
    localemod:
        locale
    locate:
        locate
    logrotate:
        logrotate
    match:
        match
    mdadm:
        raid
    mine:
        mine
    minion:
        minion
    mod_random:
        random
    modjk:
        modjk
    mount:
        mount
    mysql:
        mysql
    nagios_rpc:
        nagios_rpc
    network:
        network
    nginx:
        nginx
    nova:
        nova
    nspawn:
        nspawn
    openscap:
        openscap
    openstack_config:
        openstack_config
    pagerduty:
        pagerduty
    pagerduty_util:
        pagerduty_util
    pam:
        pam
    parted:
        partition
    pillar:
        pillar
    pip:
        pip
    pkg_resource:
        pkg_resource
    postgres:
        postgres
    publish:
        publish
    pushover_notify:
        pushover
    pyenv:
        pyenv
    random_org:
        random_org
    rbenv:
        rbenv
    rest_sample_utils:
        rest_sample_utils
    ret:
        ret
    rsync:
        rsync
    rvm:
        rvm
    s3:
        s3
    s6:
        s6
    salt_proxy:
        salt_proxy
    saltutil:
        saltutil
    schedule:
        schedule
    scsi:
        scsi
    sdb:
        sdb
    seed:
        seed
    serverdensity_device:
        serverdensity_device
    shadow:
        shadow
    slack_notify:
        slack
    smbios:
        smbios
    smtp:
        smtp
    sqlite3:
        sqlite3
    ssh:
        ssh
    state:
        state
    status:
        status
    supervisord:
        supervisord
    sysfs:
        sysfs
    syslog_ng:
        syslog_ng
    sysmod:
        sys
    system:
        system
    systemd:
        service
    telemetry:
        telemetry
    temp:
        temp
    test:
        test
    timezone:
        timezone
    tls:
        tls
    udev:
        udev
    uptime:
        uptime
    useradd:
        user
    vbox_guest:
        vbox_guest
    virtualenv_mod:
        virtualenv
    xfs:
        xfs
    zcbuildout:
        buildout
    zenoss:
        zenoss
    zfs:
        zfs
#+END_SRC
*** test.module_report
shows thousands of lines of stuff; not always useful.
** temp
- temp.file
- temp.dir
** sys
*** sys.list_modules
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_modules
031.api3.expr.useast1.int.siftscience.com:
    - acl
    - aliases
    - alternatives
    - archive
    - artifactory
    - at
    - aws_sqs
    - bcache
    - beacons
    - bigip
    - blockdev
    - boto_apigateway
    - boto_asg
    - boto_cfn
    - boto_cloudtrail
    - boto_cloudwatch
    - boto_cloudwatch_event
    - boto_cognitoidentity
    - boto_datapipeline
    - boto_dynamodb
    - boto_ec2
    - boto_elasticache
    - boto_elasticsearch_domain
    - boto_elb
    - boto_iam
    - boto_iot
    - boto_kms
    - boto_lambda
    - boto_rds
    - boto_route53
    - boto_s3_bucket
    - boto_secgroup
    - boto_sns
    - boto_sqs
    - boto_vpc
    - btrfs
    - buildout
    - cloud
    - cmd
    - composer
    - config
    - consul
    - container_resource
    - cp
    - cpan
    - cron
    - data
    - debconf
    - defaults
    - devmap
    - dig
    - disk
    - django
    - dnsmasq
    - dnsutil
    - drbd
    - elasticsearch
    - environ
    - etcd
    - ethtool
    - event
    - extfs
    - file
    - gem
    - genesis
    - git
    - grains
    - group
    - grub
    - hashutil
    - hipchat
    - hosts
    - http
    - img
    - incron
    - infoblox
    - ini
    - inspector
    - introspect
    - ip
    - iptables
    - jboss7
    - jboss7_cli
    - k8s
    - key
    - keyboard
    - kmod
    - locale
    - locate
    - logrotate
    - lowpkg
    - lvm
    - match
    - mine
    - minion
    - modjk
    - mount
    - mysql
    - nagios_rpc
    - network
    - nginx
    - nova
    - nspawn
    - openscap
    - openstack_config
    - pagerduty
    - pagerduty_util
    - pam
    - partition
    - pillar
    - pip
    - pkg
    - pkg_resource
    - postgres
    - publish
    - pushover
    - pyenv
    - raid
    - random
    - random_org
    - rbenv
    - rest_sample_utils
    - ret
    - rsync
    - rvm
    - s3
    - s6
    - salt_proxy
    - saltutil
    - schedule
    - scsi
    - sdb
    - seed
    - serverdensity_device
    - service
    - shadow
    - slack
    - slsutil
    - smbios
    - smtp
    - sqlite3
    - ssh
    - state
    - status
    - supervisord
    - sys
    - sysctl
    - sysfs
    - syslog_ng
    - system
    - telemetry
    - temp
    - test
    - timezone
    - tls
    - udev
    - uptime
    - user
    - vbox_guest
    - virtualenv
    - xfs
    - zenoss
    - zfs
#+END_SRC
*** sys.list_functions
#+BEGIN_SRC bash
[jmccarrell@master.salt.expr.useast1] [~] $ sudo salt 031.api3\* sys.list_functions sys
031.api3.expr.useast1.int.siftscience.com:
    - sys.argspec
    - sys.doc
    - sys.list_functions
    - sys.list_modules
    - sys.list_renderers
    - sys.list_returner_functions
    - sys.list_returners
    - sys.list_runner_functions
    - sys.list_runners
    - sys.list_state_functions
    - sys.list_state_modules
    - sys.reload_modules
    - sys.renderer_doc
    - sys.returner_argspec
    - sys.returner_doc
    - sys.runner_argspec
    - sys.runner_doc
    - sys.state_argspec
    - sys.state_doc
    - sys.state_schema
#+END_SRC
*** sys.runner_doc
look into this one more when I get to runners.
*** sys.returner_doc
look into this one more

