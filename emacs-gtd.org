#+TITLE: How Jeff uses emacs org to get things done

* Jeffs Mapping of the [[file:GTD-book-notes.org::*Chapter%207:%20Organizing][7 Main GTD Data Types]] onto org-mode
  for reference, here are the types:

  1. A projects list
  2. Project support materials
  3. Calendar actions and information
  4. Next actions list
  5. a Waiting for list
  6. Reference material
  7. a Someday/Maybe list

** Projects List

   Projects are stored in my main =todo.org= file as the top-level heading =* Projects=.
   Tasks not associated with a project are in the same file under the top-level heading =* Tasks=.

   But I have several todo files, corresponding to different scopes, and different privacy levels:

   - a public personal todo: todo.org
   - a private personal todo: p-todo.org
   - a work public todo: /company/.org
   - a private work todo: p-/company/.org

   The public data have no restrictions on who could or should read them; these data could be published with
   no issue.  By contrast, the private data are not intended to be shared or read by the public.

*** Larger or Longer Lived Projects

    Adjacent in the file system to each todo is a directory named =proj=.  For smaller projects, all of the
    support material may simply be stored in the main todo file.  However, for larger or longer projects,
    those data can be broken out =proj=.  This is especially helpful for long-running projects that are
    cyclical, eg, year-end accounting and taxes.  Leveraging the =org-agenda-files= here also makes this
    more useful.

** Project Support Materials

   With respect to emacs/org-mode, there are two types of data here:

   1. Pure text and links that are handled superbly by emacs
   2. So-called "rich text data", like PDFs

*** Textual Support Materials

    Treated the same as [[*Larger or Longer Lived Projects][Larger or Longer Lived Projects]].

*** Rich Text Project Support Data

    Thus far, I have not had a great deal of need nor success with collecting this type of data.

    I have experimented with [[https://c-command.com/eaglefiler/][EagleFiler]], but I have not used it enough to have an actual opinion of it.  I
    suppose plain old mac os X file indexing could be an option here, although I don't have a lot of faith
    in Apple maintaining the consistency of any one UX and thus the time commitment on me to keep up.  More
    work is needed here.

    Another open question is how to associate projects with reference data in EagleFiler.  I suppose some
    combination of tags could work.  I guess that would mean I would have to get much better at tagging my
    project work in org-mode.

** Calendar Actions and Information, Next Actions, Waiting Actions

   Well satisfied by org-mode out-of-the-box agenda views.

** Reference Material

   Again there are 2 kinds of reference materials:
   1. Textual
   2. Rich text

*** Textual Reference Materials

    My goal is to coalesce my reference materials into =notes=, structured as org files.  Again, the private
    vs. public and the personal vs. work distinctions apply.  So I typically have 4 =notes= directories.

*** Rich Text Reference Materials

    I don't really have an answer here.  [[*Rich Text Project Support Data][EagleFiler might help]].

** Someday/Maybe List

   This follows the [[*Projects List][Projects]] model, ie, 4 =someday= files split by public vs private and personal vs work.

   Similarly, long lived projects that are not active are stored in the =proj= directory adjacent to each
   =someday= file.  They can be made active by adding them to =org-agenda-files= so their tasks come into an
   agenda view.

* Tagging and organizing
** Contexts

I use a lot of tags.

GTD contexts are represented as tags with the =@= prefix, following [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html#tags][this guy]].
My contexts:  @home, @office, @train, @phone, @email, @errands

** Todo states

- TODO
- NEXT
- DOING
- WAITING
- DONE
- DEFERRED
- CANCELLED

* References
** How others use emacs to implement GTD
*** notes from the 2017: [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Emacs cafe: Orgmode for GTD]]

 Nicholas Petton: this author uses 4 files:

 inbox.org: where I collect everything
 gtd.org: holds all projects
 someday.org: the someday/maybe list
 tickler.org: entries with a timestamp for later

 His ticker file:

 - has only one heading: * Tickler
 - entries are timestamped with =C-c .= and refiled as subheadings in the tickler file
 - since every entry in the tickler file has a timestamp, they will appears at the appropriate moment in the agenda view

 here is one way to set up a tickler file / capture template:

 #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                  (file+headline "~/gtd/inbox.org" "Tasks")
                                  "* TODO %i%?")
                                 ("T" "Tickler" entry
                                  (file+headline "~/gtd/tickler.org" "Tickler")
                                  "* %i%? \n %U")))
 #+END_SRC

 He refiles his inbox every day to get to inbox zero, refiling as appropriate.

 Here is his refile targets:

 #+BEGIN_SRC emacs-lisp
   (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                              ("~/gtd/someday.org" :level . 1)
                              ("~/gtd/tickler.org" :maxlevel . 2)))
 #+END_SRC

 this way =refile= asks him for one of these targets.

 What is my current =org-refile-targets=?

 #+BEGIN_SRC emacs-lisp
   org-refile-targets
 #+END_SRC

 #+RESULTS:
 : ((nil :maxlevel . 2))

 Seems like some obvious room for improvement there.

 for contexts, which are implemented as =@= tags, the author mostly uses:

 - @home
 - @office
 - @travelling
 - @phone
 - @email
 - @errands

 the author minimizes scheduling:

 #+BEGIN_QUOTE
 I tend to avoid using timestamps in my projects as much as possible. The reason is simple: unless an entry is an appointment (to the dentist for instance) or has a fixed deadline (a release scheduled with a customer), I should decide what to work on depending on the current context (among other things). This also keeps my agenda clean, free of any fake or self-imposed deadline or schedule.
 #+END_QUOTE

 this makes sense to me based on my experience to date of scheduling (and re-scheduling) tasks.

*** notes from the 2009: [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][How I use emacs and org-mode to implement GTD]]

 the author Charles Cave uses these main org mode files:

 newgtd.org: contains TODOs, projects, appointments and reminders
 someday.org:
 journal.org: everthing else; managed by (the obsolete) remember mode.
 birthday.org: birthdays and anniversaries.  An agenda file.

 The author uses a TODO state of APPT, like John Wiegley does, to connote scheduled blocks of time.

 This author has an example of using time estimates to give him a sense of how much time has allocated in a given agenda view.

 He also talks about "Column view" with =C-c C-x C-c= as the best way to enter time estimates on tasks.

 Weekly review
 He has a weekly review checklist that he executes against, and a repeating scheduled item.  He clocks in and out the time he spends on the weekly review.
*** notes from the 2019: gtd forums: [[https://forum.gettingthingsdone.com/threads/emacs-org-mode-is-the-perfect-tool-for-gtd.15028/][Emacs org-mode is the perfect tool for GTD]]
 some key ideas from this author/implementation:

 the top level GTD project definitions are:

 - inbox
 - waiting tasks
 - tasks without context
 - active projects
 - stuck projects

 a project is a TODO with subtasks

 a project is active if it has a NEXT, else it is a stuck project

 the top level files containing the data are:

 - my/inbox
 - my/projects
 - my/someday
 - my/birthdays

 apparently there is no explicit tickler file.

 here are the settings he imports into every org file he manages?  except someday?

 =gtd-settings.org=:

 #+BEGIN_QUOTE
 #+TAGS: { @home(h) @errand(e) @review(r) @read_watch_listen(R) } work(w) daily(d)
 #+SEQ_TODO: HOLD(h) TODO(t) NEXT(n) WAITING(w) | DONE(d) CANCELLED(c)
 #+PRIORITIES: A G D
 #+STARTUP: nologrepeat
 #+END_QUOTE

 to do this, he co-locates all files in one directory, and puts this at the top of the org files:

 #+BEGIN_QUOTE
 #+SETUPFILE: gtd-settings.org
 #+END_QUOTE

**** notes from [[file:~/thirdparty/emacs-configs/greendog-gtd/emacs-org-mode.el::(defun%20my/org-skip-inode-and-root%20()][reading the code]]

 there are several functions that likely find/implement his project definitions:
 - [[file:~/thirdparty/emacs-configs/greendog-gtd/emacs-org-mode.el::(defun%20my/org-skip-inode-and-root%20()][org-skip-inode-and-root]]
 - [[file:~/thirdparty/emacs-configs/greendog-gtd/emacs-org-mode.el::(defun%20my/org-skip-leaves%20()][org-skip-leaves]]
 - [[file:~/thirdparty/emacs-configs/greendog-gtd/emacs-org-mode.el::(defun%20my/org-skip-non-root-task-subtree%20()][org-skip-non-root-task-subtree]]

 he uses the org-checklist package; check out what this offers

 here is [[file:~/thirdparty/emacs-configs/greendog-gtd/emacs-org-mode.el::#'my/repeated-task-template)][an idiom]] for inserting a repeated? template. No not repeated.

 Apparently he only has my/project in his org agenda files

 #+BEGIN_SRC emacs-lisp
       org-agenda-files (list my/project)
 #+END_SRC

 9 levels of refile targets; that is kind of interesting:

 #+BEGIN_SRC emacs-lisp
       org-refile-targets '((my/project :maxlevel . 9)
                            (my/someday :maxlevel . 9))
 #+END_SRC

 and 136 lines of custom agenda functions to produce the views he espouses.

*** notes from the 2007: [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] by John Wiegley
 John uses these states:
 - CANCELLED DONE DEFERRED DELEGATED STARTED WAITING

 he has only todo.org in his agenda list
 so no separate tickler file
 he uses =org-default-notes-file=

 his agenda view functions make use of =org-agenda-skip-entry-if=, which has been superceded by =org-agenda-skip-if=

*** notes from the 2008: [[http://members.optusnet.com.au/~charles57/GTD/Natural_Project_Planning.html][Natural Project Planning with org-mode]]
 Really an overview of the GTD process, with light application of org-mode techniques.

*** notes from investigation of John W dot files Nov 2019
 It looks like his [[file:~/thirdparty/emacs-configs/jwiegley-dotemacs/dot-org.el::(defvar%20org-mode-completion-keys][current states include]]:
 DONE DELEGATED NOTE DEFFERED STARTED TODO EPIC STORY WAITING CANCELED SOMEDAY
 but it looks more complicated than that.  He appears to use the package [[file:~/thirdparty/emacs-configs/jwiegley-dotemacs/dot-org.el::(:todo%20("SOMEDAY"%20"TO-READ"%20"CHECK"%20"TO-WATCH"%20"WATCHING")][org-super-agenda]]
