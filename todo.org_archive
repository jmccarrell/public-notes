#    -*- mode: org -*-


Archived entries from file /j/notes/todo.org


* Brigade
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 12:24
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

- done over skype / google hangouts
- structured kind of like a VC funded startup
  - honestly not like most startups
  - more of a play at trying to change how people interact in politics
  - Sean Parker
    - funding them completely
    - have funding through the elections of 2018

** Discussion with Dave Kincaid

- Dave is Director of Data

*** problems they want to solve

Handles 2 kinds of work:

- data pipelining, ETL
- 3 types of data:
  - client telmetry
    - very wide product surface
    - scale not very high
- some third party data
  - core notions: if we have actions that target representatives, we need a very structured
    - need representatives, candidates,
- product data features
- we run with a lot of the microservices

- in the middle of the shift;
  - had a data team with reasonable staff, but not the greatest purpose and direction
- in some senses we are starting from scratch
- 2 roles immediately
  - junior generalist
  - more senior: worked with multiple different data architectures
- what we have is mostly scala

- do I need to be a political junkie to succeed at Brigade?
  - Dave Kincaid

- Dave is from a mobile security company

- for a bike lane here in S.F.
  - harder: to know if you care about a bike lane

- Brigade

- ex: build the 49er stadium

- want to launch with 2 main actions in teh next couple of months
  - petition
    - might want to target the S.C. county commissioners
    - or the mayor
    - accountability is part of it
    - hopefully there is some legislation; to close the feedback loop
  - vote pledging
    - semi public indicator of how you intend to vote

- there were a couple of tools in the 2016 election to do vote pledging

- looking for how to solve a problem
  - how I work to solve a problem
  - don't particularly care

- in general the amount of emotional investment is high
- commitment shows itself in terms of professional development
- put a lot of emphasis on code reviews
  - 1 hour per day
  -
the back end

- Dave Kincaid has 7 years of experience
  - he is very satisfied that he hasn't gone stale while he has been there
- the opportunities to grow are large

- DK wants to have an impact through data
  - he to


Nikhil @ brigade emailed me to say they did not want to move forward.


* DONE set up my org mode customization
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 13:50
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_OLPATH: Set up GTD in org mode
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

- how does Sacha do it?
- A: like this:

    #+BEGIN_SRC emacs-lisp :tangle yes
    (bind-key "C-c r" 'org-capture)
    (bind-key "C-c a" 'org-agenda)
    (bind-key "C-c l" 'org-store-link)
    (bind-key "C-c L" 'org-insert-link-global)
    (bind-key "C-c O" 'org-open-at-point-global)
    (bind-key "<f9> <f9>" 'org-agenda-list)
    (bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
    #+END_SRC

- so just shove the global key config into my init.el



* DONE set up the recommended global key bindings for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 13:50
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_OLPATH: Set up GTD in org mode
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

   The four Org commands ‘org-store-link’, ‘org-capture’, ‘org-agenda’,
and ‘org-iswitchb’ should be accessible through global keys (i.e.,
anywhere in Emacs, not just in Org buffers).  Here are suggested
bindings for these keys, please modify the keys to your own liking.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

** how do I archive things?

A: ~C-c C-x C-a~, org-archive-subtree-default





* DONE turn off global binding of C-x C-e to compile
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 13:54
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_OLPATH: Set up GTD in org mode
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

so it can be eval-region or whatever it is normally for lisp mode things.



* DONE Build up my set of org mode files
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 13:54
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_OLPATH: Set up GTD in org mode
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

- survey
  - John W
  - Charles
  - Sacha?
  - Steve Purcell
- decide my set of initial org files
  - candidates
    - gtd
    - someday

** John W gtd org files

the best inference I can find to the files John Wiegley uses is this bit of his config:

#+begin_src emacs-lisp
     ("O" "All TODOs" tags "TODO<>\"\""
      ((org-agenda-overriding-header "All TODOs")
       (org-agenda-files
        (quote
         ("~/doc/tasks/todo.txt" "~/doc/tasks/BAE.txt" "~/doc/tasks/Bahai.txt" "~/doc/tasks/OSS.txt" "~/doc/tasks/emacs.txt" "~/doc/tasks/habits.txt" "~/doc/tasks/index.txt" "~/doc/tasks/notes.txt" "~/doc/tasks/archive/BAE.txt" "~/doc/tasks/archive/Bahai.txt" "~/doc/tasks/archive/BoostPro.txt" "~/doc/tasks/archive/CEG.txt" "~/doc/tasks/archive/Embarcadero.txt" "~/doc/tasks/archive/FPComplete.txt" "~/doc/tasks/archive/IL-05.txt" "~/doc/tasks/archive/TI.txt" "~/doc/tasks/archive/archive-2007.txt" "~/doc/tasks/archive/archive-2008.txt" "~/doc/tasks/archive/archive-2009.txt" "~/doc/tasks/archive/archive-2010.txt" "~/doc/tasks/archive/archive-2011.txt" "~/doc/tasks/archive/archive-2012.txt" "~/doc/tasks/archive/archive-2013.txt" "~/doc/tasks/archive/archive-2014.txt" "~/doc/tasks/archive/archive-2015.txt" "~/doc/tasks/archive/archive-2016.txt" "~/doc/tasks/archive/archive.txt" "~/doc/tasks/archive/emacs.txt"))))))))
#+end_src

** Sacha org files





* DONE Initial Configuration [100%]
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-05-04 Thu 14:10
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_OLPATH: Set up GTD in org mode
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:
 - [X] define my set of initial states
 - [X] get the display of number of tasks done to work
 - [X] define my list of org mode files
 - [X] set up the archive file for each of my org files
 - [X] start working with agendas
 - [X] start a keyboard cheat sheet



* DONE Set up GTD in org mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:49
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

The idea is to keep 3 files initially:

  - this file, todo.org: all personal projects at the top level
  - yadle.org: tasks related to Datawhere
  - davo.org: ditto for Davo


** DEFERRED Finish reading GTD book

*** DONE read GTD chapter 9: Engaging: Making the Best Action Choices
    SCHEDULED: <2017-05-06 Sat>

*** DONE read GTD chapter 10: Getting Projects under Control
    SCHEDULED: <2017-05-06 Sat>

*** DEFERRED read GTD chapter 11: the Power of the Capturing Habit
    SCHEDULED: <2017-05-07 Sun>

*** DEFERRED read GTD chapter 12: the Power of the Next Action Decision
    SCHEDULED: <2017-05-07 Sun>

*** DEFERRED read GTD chapter 13: the Power of Outcome Focusing
    SCHEDULED: <2017-05-08 Mon>

*** DEFERRED read GTD chapter 14: GTD and Cognitive Science
    SCHEDULED: <2017-05-08 Mon>

*** DEFERRED read GTD chapter 15:  the Path of GTD Mastery
    SCHEDULED: <2017-05-09 Tue>

** Come up with an initial set of contexts [1/1]

- [X] first review contexts in the GTD book

*** possible initial contexts

- Agendas
  - Marcy
  - PeterK
  - DaveL
- Davo and Yadle
  - no, defined by the file the tasks are in
- Errands
- Calls?
  - not sure I have enough for this to make sense
- Read/Review


*** the GTD list of common contexts

- Calls
- At computer
- Errands
- At office (miscellaneous)
- At Home
- Anywhere
- Agendas (for people and meetings)
- Read/Review


** explore the notion of separating todos from notes

my today-todo is a mixed journal of todo items and notes on how I did those things.

if I pursue the idea of separating out long-lived notes from todo lists, how does that affect my workflow?

** figure out how to format preformatted text in org mode


** Investigate agenda views [0/1]

the default agenda views present everything;

- [ ] I need to understand how agendas can be filtered and viewed
- [ ] re-watch Rainer's agenda video

** NEXT GTD org-mode FAQ

*** what is the key binding to mark something TODO, NEXT, etc?

A: Shift-<LEFT, RIGHT> to move to the next state definedin SEQ_TODO
A: ~C-c C-t~ to set the state to one of the choices, like DONE.

*** How do I schedule something?

put the cursor on the headline; then 

*** how do I get an agenda of the current things I am working on?

A: ~C-a a~ then ~a~ for basic agenda.

Restrict the agenda view to the current file or subtree

- restrict to file: ~C-u C-c C-x <~
- to subtree:  ~C-c C-x <~
- restore unrestrict ~C-c C-x >~

*** how are GTD contexts typically implemented?

The usual way is to implement TAGS at the top of the file.

then insert one more many tags with ~C-c C-q~


*** how do I archive things?

A: ~C-c C-x C-a~, org-archive-subtree-default to archive everthing in the subtree
A: there is also ~C-c C-x C-s~ org-archive-subtree which archives the subtree starting at point

- and its prefix modifier: ~C-u C-c C-x C-s~ which will search for any open TODO items.  if none are found, it will offer to archive that subtree.

** Watch again the videos on agenda basics

- [ ] make a basic keyboard cheet sheet; or augment the one I already have.

*** Watch 103: schedule, deadlines, agendas
*** Watch 104: Repeating Tasks
*** Watch 105: Checklists

** SOMEDAY Empty my Inbox

  - email inbox
  - walk back through prior today-todo file extracting projects
  - empty Things categories: look at 'Next'
  - review /j/proj
  - review /j/ebooks
  - ~/Dropbox/project-list.md or some such

** Capture my list of projects into org mode


** TODO Follow Sacha's org-mode Map

[[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/][Some tips for learning Org Mode for Emacs]]

*** Todos including shortcuts

**** Todo configuration
define your own workflow

*** Scheduling

*** Date Offset

*** Agendas
weekly, daily

**** Agenda Deadlines

**** Repeating Agendas

*** Logs
lognotedone, logdone

*** Tags

*** Search
esp with tags; also, jumping

*** Custom Agenda

*** Stuck Projects
defining your own

*** Capture
templates, links

*** Refiling
organizing

**** Sorting
priority, ABC

*** Archiving

*** Multiple Files

**** Includes

*** Views

** Build up my set of categories

- [ ] figure out what categories:
  - John W uses
  - Sacha uses
  - Charles uses
  - Steve Purcell uses
  - decide my own categories

*** Categories John W uses

I can't find any match in johns config for =org-todo-keywords=


*** Categories Sacha uses

...can be found [here](http://pages.sachachua.com/.emacs.d/Sacha.html#org5e4acb0)

She uses keywords:

#+begin_src emacs-lisp
(setq org-todo-keywords
 '((sequence
    "TODO(t)"  ; next action
    "TOBLOG(b)"  ; next action
    "STARTED(s)"
    "WAITING(w@/!)"
    "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
   (sequence "LEARN" "TRY" "TEACH" "|" "COMPLETE(x)")
   (sequence "TOSKETCH" "SKETCHED" "|" "POSTED")
   (sequence "TOBUY" "TOSHRINK" "TOCUT"  "TOSEW" "|" "DONE(x)")
   (sequence "TODELEGATE(-)" "DELEGATED(d)" "|" "COMPLETE(x)")))
#+end_src

with faces:

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "green" :weight bold))
        ("DONE" . (:foreground "cyan" :weight bold))
        ("WAITING" . (:foreground "red" :weight bold))
        ("SOMEDAY" . (:foreground "gray" :weight bold))))
#+end_src


*** My Categories

- to read/review


** Working with Code

*** workflow

One can open a given block of code in a new buffer with =C-c '=; then one can eval-buffer


** TODO org mode capture

- [ ] How do I use capture?  C-c c to capture a new item.  Doesn't seem to work for me.  C-c c is unbound.

*** TODO read Capture - Refile - Archive: section 9

- [ ] - so I need to specify where my org stuff is going to go.  propose: ~/j/notes/org~
- and I need a binding for 'org-capture

- [ ] what does John W do?  A: I can't tell
- sacha?  Sacha doesn't use org-capture at all.


** NEXT get describe-personal-keybindings to work

after projectile loads, this command throws:

funcall-interactively: Wrong type argument: symbolp, (quote projectile-command-map)



* DONE Repair door ding in Lexus
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:49
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

** DONE find the name of the body shop

** DONE Work with Marcy to get the NX to the body shop        :AGENDAS:MARCY:


* DONE Develop git sync
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:49
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

Ok I have it mostly working.
Next I need to wire it into my jwm-dotfiles flow
I don't want to make yet another dot file here.
So maybe I set up lib/sh/git-sync.sh and source that from my dotfiles?

What else is in ~/lib and do I sync that as part of dotfiles?

A: no, nothing from lib is synced now; just bin.
In fact, I have no ~/lib on vega.

So add ~/lib to the dotfiles syncing and put the git functions there.


* DEFERRED apply to roche job
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:49
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DEFERRED
  :END:

https://stackoverflow.com/jobs/129526/python-software-engineer-sequencing-roche?sec=False


* sign up for FordGoBike
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:49
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :END:

- $124 for an annual membership with unlimited 45 min rides.
- starts 6/28, which is a Wednesday.


* DONE Python env
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-06-19 Mon 07:50
  :ARCHIVE_FILE: /j/notes/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:

I need to remove python 3.4 from vega now that it is no longer needed.

What is the difference between autoenv and pyenv?

pyenv is specific to python

autoenv sets state per directory, and is deprecated in favor of direnv, according to the author Kenneth Reitz.

so how do I add the homebrew python3 to pyenv?

some quick googling does not show any obvious recipes
and given the name clash between python and python3,
and that pyenv has to work by overriding the literal names
for its 'shims' approach to work,
I think there is not likely to be a good solution here.

So just go back to what I was doing before.

** Todo

- [ ] Nuke pyenv entirely, as I no longer need its functionality.
- [ ] recreate the autofile virtualenv with homebrew py361

use [[https://direnv.net/][direnv]] to set per-directory configuration, like PATH etc in the future.
and its [[https://github.com/direnv/direnv/wiki/Emacs][emacs package]]

