Notes about Jeff's datastore of things and their locations

entities:

item
container
location

operations:

CRUD on each entity

search
  for items given some or none locations or containers
    by label, by item description
    gives location, container tuples
  for all containers in a location

give a label to an item, a container, or a location

put an item in a container (no previous location or container)
move an item into a container from another container or location
put an item in a location (implies deleting it from its previous container or location)

move a container to a location

find all items with no associated location

----------------

what is an item?
A: it has properties:
 qty
 label
 description
items need not 'belong' to a container;
they may be in a location directly; or they may have no location or container

what is a container?
A: it has properties:
 label
 what it contains

what is a location?
A: it has properties
 label
 physically where it is
 what it contains: containers or items

----------------

Object identity:

use guids for identity
thus each entity has a guid key
each entity is 
guid -> tag
  where tag is a tuple with an atom in the first slot
  the tag atoms are:
    item, container, location

if I choose guids:
  then properties of an object can change without its identity
    (and thus its relationships) changing
  containing relationships become lists of guids

----------------

locations

I want to be able to express:

the shed
box 45 on shelf 26 in the shed

locations are from a fixed list;
  it should not be easy to create new locations by side effect

----------------------------------------------------------------

Tue Aug 10 11:23:28 PDT 2010

build in stages:

drop notion of location initially

http://soa.dzone.com/news/crud-bad-rest
  is an opinion piece; a useful perspective

http://wiki.catalystframework.org/wiki/crud/crud_and_rest
  contains references to other useful REST

http://microformats.org/wiki/rest/urls
  maps verbs to urls for a 'people' application
  a reasonable example

map CRUD to http verbs

PUT with    an id is an update
    without             create
GET               is    read
DEL               is    delete

I will only allow complete updates to objects; no partial state
  this follows the REST

POST is disallowed

----------------------------------------------------------------

Mon Dec  6 20:57:26 PST 2010

NO ABANDON THIS IDEA: consider how to use mysql permissions to manage access to the data.

What are mysql read / write permissions like?

----------------------------------------------------------------

Sun Dec 26 20:46:52 PST 2010

start building the schema in mysql workbench

