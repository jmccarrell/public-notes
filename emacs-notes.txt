registers in emacs:

C-x r <SPC> R
     Save position of point in register R (point-to-register).

C-x r j R
     Jump to the position saved in register R (jump-to-register).

C-x r s R
     Copy region into register R (copy-to-register).

C-x r i R
     Insert text from register R (insert-register).

M-x append-to-register <RET> R
     Append region to text in register R.

M-x prepend-to-register <RET> R
     Prepend region to text in register R.

C-x r r R
     Copy the region-rectangle into register R
     (copy-rectangle-to-register).  With numeric argument, delete it
     as well.

C-x r i R
     Insert the rectangle stored in register R (if it contains a
     rectangle) (insert-register).

jwm: follow this reference when you have a minute:
   See also the command sort-columns, which you can think of as
sorting a rectangle.  *Note Sorting::.

read about bookmarks

columns of numbers

----------------

found an interesting reference to directory-local-variables;
  could be a solution to my per-directory formatting needs.
  http://atomized.org/2009/05/emacs-23-easier-directory-local-variables/

set up php-mode (and any other local vars desired) in php files:

// Local Variables:
// mode: php;
// tab-width: 4;
// End:

this is documented in the emacs manual under the heading: 'Local Variables in Files'

Here is more context on Local Variables:

  There are two ways to specify file local variable values: in the first line, or with a
  local variables list.  Here's how to specify them in the first line:

     -*- mode: MODENAME; VAR: VALUE; ... -*-

  You can specify any number of variable/value pairs in this way, each pair with a colon
  and semicolon as shown above.  The special variable/value pair `mode: MODENAME;', if
  present, specifies a major or minor mode; if you use this to specify a major mode, it
  should come first in the line.  The VALUEs are used literally, and not evaluated.

    You can use the command `add-file-local-variable-prop-line' instead of adding entries
  by hand.  It prompts for a variable and value, and adds them to the first line in the
  appropriate way.  The command `delete-file-local-variable-prop-line' deletes a variable
  from the line.  The command `copy-dir-locals-to-file-locals-prop-line' copies
  directory-local variables (*note Directory Variables::) to the first line.

    Here is an example first line that specifies Lisp mode and sets two variables with
  numeric values:

     ;; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-


----------------

to change the environment (especially the PATH) that emacs reads, change
environment.plist, which the OSX runtime (specifically 'loginwindow') will load before
emacs runs, and thus emacs will see that PATH.

The tech note for this is: http://developer.apple.com/library/mac/#qa/qa1067/_index.html

Edit it with: Property List Editor
File: ~/.MacOSX/environment.plist

Then logout and login for loginwindow to propogate the change.

----------------

when in recursive edit, with the [[ ]] on the mode line,
C-[   abort-recursive-edit
will get out of it.

----------------

mysql in emacs

use
sql-help
to read about sql mode.
Start a connection to mysql with:
sql-mysql

In another buffer, run
sql-mode
Then useful commands can be found in the SQL menu, like:

C-c C-c     Send-paragraph
C-c C-r     Send-region

----------------

outline mode

outline-minor-mode is typically what I would use for txt files with a file local variable:
mode: outline-minor

View an outline in 2 or more different views:

You can display two views of a single outline at the same time, in
different windows.  To do this, you must create an indirect buffer using
`M-x make-indirect-buffer'.  The first argument of this command is the
existing outline buffer name, and its second argument is the name to
use for the new indirect buffer.


In outline-minor mode, all outline commands are on prefix: C-c @,
so every command below is at, e.g.,  'C-c @ C-n' instead of 'C-c C-n'

Outline Motion Commands:

`C-c C-n'
     Move point to the next visible heading line
     (`outline-next-visible-heading').

`C-c C-p'
     Move point to the previous visible heading line
     (`outline-previous-visible-heading').

`C-c C-f'
     Move point to the next visible heading line at the same level as
     the one point is on (`outline-forward-same-level').

`C-c C-b'
     Move point to the previous visible heading line at the same level
     (`outline-backward-same-level').

`C-c C-u'
     Move point up to a lower-level (more inclusive) visible heading
     line (`outline-up-heading').

outline visibility commands:

`C-c C-c'
     Make the current heading line's body invisible (`hide-entry').

`C-c C-e'
     Make the current heading line's body visible (`show-entry').

`C-c C-d'
     Make everything under the current heading invisible, not including
     the heading itself (`hide-subtree').

`C-c C-s'
     Make everything under the current heading visible, including body,
     subheadings, and their bodies (`show-subtree').

`C-c C-l'
     Make the body of the current heading line, and of all its
     subheadings, invisible (`hide-leaves').

`C-c C-k'
     Make all subheadings of the current heading line, at all levels,
     visible (`show-branches').

`C-c C-i'
     Make immediate subheadings (one level down) of the current heading
     line visible (`show-children').

`C-c C-t'
     Make all body lines in the buffer invisible (`hide-body').

`C-c C-a'
     Make all lines in the buffer visible (`show-all').

`C-c C-q'
     Hide everything except the top N levels of heading lines
     (`hide-sublevels').

`C-c C-o'
     Hide everything except for the heading or body that point is in,
     plus the headings leading up from there to the top level of the
     outline (`hide-other').


How does searching work in the context of hidden outline elements?
From the emacs manual:

    When incremental search finds text that is hidden by Outline mode, it makes that part
    of the buffer visible.  If you exit the search at that position, the text remains
    visible.  You can also automatically


----

File local variables can be specified at the top of a file one 1 line:

     -*- mode: MODENAME; VAR: VALUE; ... -*-

or at the bottom with 3,000 chars of EOF in the form:
Any prefix/suffix is allowed around 'Local Variables:';
emacs strips those from the rest of the section

     /* Local Variables: */
     /* mode:c           */
     /* comment-column:0 */
     /* End:             */

----------------
The functions

text-scale-increase             C-x  C-+
           decrease             C-x  C--
           set

can be used to change the font size of the current buffer.
Very useful.

----
emacs notes to drill down on:{
from lisp/progmodes/sql.el

;; For documentation on the functionality provided by comint mode, and
;; the hooks available for customizing it, see the file `comint.el'.

;; Hint for newbies: take a look at `dabbrev-expand', `abbrev-mode', and
;; `imenu-add-menubar-index'.
}

