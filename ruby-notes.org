* Jeffs Ruby Notes.

identifiers that begin with Capital letters are constants

prefer snake_case

| syntax | type                                                                        |
|--------+-----------------------------------------------------------------------------|
| $      | global variables                                                            |
| @      | instance variables                                                          |
| @@     | class variables                                                             |
| ?      | methods ending in ? by convention are predicates                            |
| !      | methods ending in ! modify their args; have non ! variants w/o side effects |
| =      | methods ending in = make the method an lvalue                               |

** block comments

%begin
%end

** executing commands

%x[ shell-cmd ]
`shell-cmd`

implemented as the Kernel.` method, so
files = Kernel.`('ls');

** strings

string literals are mutable in Ruby
So it makes a copy of a string literal each time it sees one; like in a loop:

>> 2.times { puts "Hello Jeff".object_id }
1765430
1765400
=> 2

*** String operators

| syntax           | operator                           |
|------------------+------------------------------------|
| +                | concatentation                     |
| <<               | append                             |
| *                | repeat, eg: elipsis = '.'*3        |
| == != < <= > >=  | methods are case sensitive         |
| casecmp          | case-insensitive string comparison |
| downcase, upcase | limited to ascii range in 1.8      |


** Here documents

doc <<'HERE'
Single-quoting the delimiter means no variable expansion, like perl
HERE

doc2 = <<-"# # #"
the hyphen in the here doc operator means the closing token
may have leading whitespace.
            # # #

avoid character literal syntax; its semantics change between ruby 1.8 and 1.9

** Parallel Assignment

x, y = y, x   # swap variables

If there is a single lvalue and multiple rvalues, ruby creates an array of the rvalues and
assigns it to the lvalue.

** Loops

For loops do not define a block scope.
This code

for i in 1..3 do
  bar = i * i
end
print bar

prints 9

However, iterators do define a block scope.

(1..3).each { |i| foo = i * i }
puts foo

gives: for-scope.rb:8: undefined local variable or method `foo' for main:Object (NameError)

** file reading idiom

File.open("/etc/hosts") do |f|
  f.each {|line| print line }
end

** Enumerable

The Enumerable class defines the rhyming methods:

collect, select, reject and inject

collect == map
select  == grep
reject  == ! grep
inject  == too complex for a 1 liner

** Function declaration

specify a default:

def load_font( name, size = 12 )
  # find the font...
end

varargs functions; declare with `*`; which supplies all args as an array

def echo_args( *args )
  args.each { |a| puts a }
end

in irb how can I get the type of an object?  A: there is no notion of type, but there is class

>> key_pad.class
Hash

** pry

so it seems that pry is the repl of choice.
install it:

$ gem install pry pry-doc
  ...
6 gems installed

It seems that the template to create gems creates a =bin/console= script, which is
the intended place to interactively try out the gem.

That is what I used to work with the entelo logger gem.

*** Inspect docs

to see docs on an object

from an instance s of String

show-doc s.each_line

from the ri syntax:

show-doc String#each_line

*** inspect methods

[14] pry(main)> show-method s.each_line
