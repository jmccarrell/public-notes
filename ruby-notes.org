* Jeffs Ruby Notes.

identifiers that begin with Capital letters are constants
but strings are mutable, so constants are a convention, not a mechanism.

prefer snake_case

| syntax | type                                                                        |
|--------+-----------------------------------------------------------------------------|
| $      | global variables                                                            |
| @      | instance variables                                                          |
| @@     | class variables                                                             |
| ?      | methods ending in ? by convention are predicates                            |
| !      | methods ending in ! modify their args; have non ! variants w/o side effects |
| =      | methods ending in = make the method an lvalue                               |

** block comments

%begin
%end

** executing commands

%x[ shell-cmd ]
`shell-cmd`

implemented as the Kernel.` method, so
files = Kernel.`('ls')`;

** strings

string literals are mutable in Ruby
So it makes a copy of a string literal each time it sees one; like in a loop:

>> 2.times { puts "Hello Jeff".object_id }
1765430
1765400
=> 2

*** String operators

| syntax           | operator                           |
|------------------+------------------------------------|
| +                | concatentation                     |
| <<               | append                             |
| *                | repeat, eg: elipsis = '.'*3        |
| == != < <= > >=  | methods are case sensitive         |
| casecmp          | case-insensitive string comparison |
| downcase, upcase | limited to ascii range in 1.8      |


** Here documents

doc <<'HERE'
Single-quoting the delimiter means no variable expansion, like perl
HERE

doc2 = <<-"# # #"
the hyphen in the here doc operator means the closing token
may have leading whitespace.
            # # #

avoid character literal syntax; its semantics change between ruby 1.8 and 1.9

** Parallel Assignment

x, y = y, x   # swap variables

If there is a single lvalue and multiple rvalues, ruby creates an array of the rvalues and
assigns it to the lvalue.

** Loops

For loops do not define a block scope.
This code

for i in 1..3 do
  bar = i * i
end
print bar

prints 9

However, iterators do define a block scope.

(1..3).each { |i| foo = i * i }
puts foo

gives: for-scope.rb:8: undefined local variable or method `foo' for main:Object (NameError)

** file reading idiom

File.open("/etc/hosts") do |f|
  f.each {|line| print line }
end

** Enumerable

The Enumerable class defines the rhyming methods:

collect, select, reject and inject

collect == map
select  == grep
reject  == ! grep
inject  == too complex for a 1 liner

** Function declaration

specify a default:

def load_font( name, size = 12 )
  # find the font...
end

varargs functions; declare with `*`; which supplies all args as an array

def echo_args( *args )
  args.each { |a| puts a }
end

in irb how can I get the type of an object?  A: there is no notion of type, but there is class

>> key_pad.class
Hash

** pry

so it seems that pry is the repl of choice.
install it:

$ gem install pry pry-doc
  ...
6 gems installed

It seems that the template to create gems creates a =bin/console= script, which is
the intended place to interactively try out the gem.

That is what I used to work with the entelo logger gem.

*** Inspect docs

to see docs on an object

from an instance s of String

show-doc s.each_line

from the ri syntax:

show-doc String#each_line

*** inspect methods

[14] pry(main)> show-method s.each_line

* pry notes from Jason Rosendale

I finally read the documentation for ruby’s “pry” debugger and I feel a fool. I have been doing some dumb, dumb stuff. Here are the three things I learned:

Pinned
[8:34]
1) You can add new breakpoints from within pry! For a _year_ now I’ve been exiting out of the program, inserting additional “binding.pry” statements in my code, and re-running the program.
```    1408: def get_educations
    1409:   services_with_educations = ServicePriorities.services_by_education_priority(services)
    1410:   binding.pry
 => 1411:   rich_education = services_with_educations.map do |service|
    1412:     educations = service.educations
    1413:     break([educations]) if educations.select(&:degree).count > 0
    1414:     next(educations)
    1415:   end.compact.last || Education.none
    1416:   rich_education.sort_by_started_at
    1417: end
```
```pry(#<Profile>)> break 1416
pry(#<Profile>)> continue
```
```    1408: def get_educations
    1409:   services_with_educations = ServicePriorities.services_by_education_priority(services)
    1410:   binding.pry
    1411:   rich_education = services_with_educations.map do |service|
    1412:     educations = service.educations
    1413:     break([educations]) if educations.select(&:degree).count > 0
    1414:     next(educations)
    1415:   end.compact.last || Education.none
=>  1416:   rich_education.sort_by_started_at
    1417: end
```
You can also add breakpoints at lines in other files (including gems!), at the start of methods, or when certain conditions trigger. The docs for this are at https://github.com/nixme/pry-debugger#breakpoints (edited)

Pinned
[8:34]
2) You can re-bind pry to a new scope at any time with `cd`. If you re-bind to an object, you call all of that object’s private methods. Until now I’ve been peeking into objects by assigning everything to a temporary variable or by chaining together absurd strings of `.send`s.
```pry(#<ProfilesController>)> profile.index_document
# => NoMethodError: private method `get_url' called for #<Profile:0x007fa57d85a370>
pry(#<ProfilesController>)> cd profile
pry(#<Profile>):1> self.class.name
=> "Profile"
pry(#<Profile>):1> index_document
=> [ indexes the heck out of that document]
```
The command `ls -cli` is pretty useful when you’re inside an object. It will list all of the (c)onstants, (l)ocal variables, and (i)nstance variables defined for that instance. (edited)

Pinned
[8:36]
3) The `!!!` command will exit the pry session and terminate the ruby interpreter. I’ve been using a combination of `exit-program` and trying to frantically hit Ctrl-C before the program can loop back around to another binding-pry.

And a fourth thing that I didn’t learn today but is still useful:

4) The command `$ foo` will show the definition of `foo` and the exact location of the source code containing that definition. It works whether `foo` is a class, module, or method. You can use it to view method definitions:
```pry(#<ProfilesController>)> $ profile.get_url

From: /Users/jrosenda/Documents/code/reputedly/app/concerns/assets.rb @ line 30:
Owner: Assets
Visibility: private
Number of lines: 3

def get_url(url, is_profile = true)
  [configatron.asset_host_url, get_path(url, is_profile)].join
end
```

It can be used to peek into gems:
```pry(#<ProfilesController>)> $ REDIS.flushdb

From: /Users/jrosenda/.rvm/gems/ruby-2.1.8@rails31/gems/redis-3.1.0/lib/redis.rb @ line 174:
Owner: Redis
Visibility: public
Number of lines: 5

def flushdb
  synchronize do |client|
    client.call([:flushdb])
  end
end
```
And god help us all, it will also list all monkeypatches if you give it the `-a` flag. For a true horror show try loading up Reputedly and do a `$ -a String`: there are 30 monkeypatches for that class when Rails first loads and at least seven more can get loaded under some circumstances.

* hash with default value notes from Jason Rosendale
Ruby’s `Hash.new` method takes an optional block that controls what happens when you access a non-existent key. I’ve only known about it since yesterday (YIL) but I’m finding uses for it everywhere.

*Example 1*: Using a hash like a memoizable method
```results = Hash.new { |h, k| h[k] = some_expensive_method(k) }```
The first time you try to access `results[n]` it will call the block, calculate `some_expensive_method(n)`, *store the result in the hash*, and then return that result. The next time you call `results[n]` it will immediately return the result. Example:

```require 'prime'
divisors = Hash.new { |h, k| hash[k] = Prime.prime_division(k) }
divisors[841321872791401] # returns in 2.2 seconds
divisors[841321872791401] # returns in 0.00002 seconds```

*Example 2*: keeping track of already-seen keys

I’m sure you’ve seen code like this:
```already_seen = {}

profiles.each do |profile|
  if already_seen[profile.email]
    next
  else
    already_seen[profile.email] = true
  end
  verify_email(profile)
end```
We can save a few lines by creating a hash that automatically sets its value after it is accessed for the first time:

```already_seen = Hash.new { |hash, key| hash[key] = true; false }
profiles.each do |profile|
  verify_email(profile) unless already_seen[profile.email]
end```
The first time you try to access `already_seen[key]` it will execute the block, which sets the value to `true` but returns `false`. The next time you call `already_seen[key]` it will return the stored value of `true`.


*Example 3*
We have a lot of code that establishes default values for hashes by having a bajillion lines like
```location = params['location'] || nil
email    = params['email']    || "unknown"
seen_at  = params['seen_at']  || Date.today
...```

and these are often repeated in each place that the hash is accessed. An alternative would be to define a `default_value_for(key)` method that contains a case statement and then create the hash like
```hash_with_custom_defaults = Hash.new { |hash, key| hash[key] = default_value_for(key) }```

*Example 4*
Lazy hash duplication! Instead of copying every key/value from the old hash, copy individual key/value pairs at the time that they’re first accessed.
```old_hash = {a: 1, b: { x: 10, y: 20 } }
subhash = Hash.new { |hash, key| hash[key] = old_hash[key] }

subhash         # => {}
subhash[:b][:x] # => 10
subhash         # => {:b => {:x=>10, :y=>20}}```
* Ruby emacs env

looks like Howard Abrams has a [[https://github.com/howardabrams/dot-files/blob/master/emacs-ruby.org][well laid out ruby setup]]

the ssh tunnel Cole recommended  [[https://www.opoet.com/pyro/][Secure Pipes]] to solve bastion host timeouts

* rbenv vs rvm
I prefer rbenv.

jmon said:
#+BEGIN_QUOTE
rvm is bloated
they have this concept of “gemsets” where it installs gems for each project in a different place
but that’s what bundler is for…
it installs the versions needed for your project
it’s ok… projects know how to share gems if they happen to use the same versions
i don’t need 5 of the same thing installed on my machine at once
i used to use rvm for a long time and had all kinds of issues that were complicated to solve. and then i switched and never had a problem again.
#+END_QUOTE
