Sep 2008

help.start()
  in the R workspace loads the documentation into your HTML browser
    including: R Intro, R Data Import, the R FAQ, etc.

use the 
quartz()
output driver on OSX; gives much prettier results than the X window choice.


ESS: Emacs Speaks Statistics

in the FAQ

source and sink are commands in files and output in files respectively:

source("commands.R");
sink("output.R")
sink
  alone on a line puts output back to the console

objects()
ls()
  displays the contents of the workspace
clear the symbol table: remove() aka rm():
  remove takes:
    names; quoted or unquoted
    list: a character vector of names to be removed
    pos: a way to name where to search for the symbol; preferred over envir
    envir: the environment in which to find the symbols
    inherits: search enclosing frames?

work on the intermediate object space R has

rm(x, y, z);

On exit, the contents of the current workspace are serialized to:
.RData
The command history used to derive that state is stored in:
.Rhistory

So use different directories for different problems to prevent the states from
getting intermingled.

To read the timing data from a samples file, I can likely use scan, like this:

samples <- scan("samples.dat" what=numeric(0))

AI: figure out how to read the sample timing data and get only the timing column

Installation.
Got a package from CRAN for OS X and installed with all defaults.
NB

    The Cocoa GUI called R.app will be installed by default in your Applications folder, R
    framework will be installed in /Library/Frameworks. Optional packages will be
    installed in /usr/local if selected (custom install only).

----------------------------------------------------------------
So I left the REvolution R distro behind and went back to the plain jane
mac os distro.

From there, and the CRAN mac os x faq:
http://cran.cnr.berkeley.edu/bin/macosx/RMacOSX-FAQ.html#How-to-install-packages

I was pointed toward using the "Package Installer" from the Packages & Data menu item.

I installed RMySQL using the GUI, then used it straight away:

> library("RMySQL")
Loading required package: DBI

So it appears I have installed RMySQL in R64.

----------------

Now try to use RMySQL to load my performance data

# load the driver
drv <- dbDriver("MySQL")

# and make a connection
dbh <- dbConnect(drv, host = "jeff-dev.imiclk.local", dbname = "adt2", username = "imiuser", password = "i2db")

# load long requests
res <- dbSendQuery(dbh, "select seg_millis from ad_time where seg_name = 'H' and seg_millis > 100")
longreq <- fetch(res, n = -1)

# and close the query handle
dbClearResult(res)

# now longreq is a table:

> longreq
    seg_millis
1          227
2          163
3          212
4          134
  ...
277        102
278        338
279        484
> 

----------------
----------------------------------------------------------------
working through 'Using R'

Ch. 1

This may be a data frame structure.

'combine' 
  c(3, 4, 8)

gives a vector.

I can enter data by using the data.frame notation:

elasticband <- data.frame(stretch=c(46,54,48,50,44,42,52),
  distance=c(148,182,173,166,109,141,166))

then edit the data at will with:

elasticband <- edit(elasticband)
this invokes a UI dialog edit box with those 2 dimensional data.

read.table()
  reads input from files in the file system.
similiarly,
read.csv()

names are case-significant

# is comment char

; is command separator

help() is help function;
with no args starts at the top of the tree.
e.g.
help(read.csv)
equivalent syntax is ?
?read.csv

there is also a search and apropos:
help.search("mysql")
which works well
?? is an alias for help.search

one may need to quote strings to the help function: eg. help("[[")

one can usually run the examples for a topic with e.g. example(scan)

apropos("mysql")
didn't seem to do much:
  > apropos("mysql")
  character(0)

load() loads data
attach() does too, but lazily when named? data sets are needed

----------------

Using R Ch 1. Exercises

1. plot distance against stretch for elasticband:
> plot(elasticband)

2. Load these data:
year snow.cover
1970 6.5
1971 12.0
1972 14.9
1973 10.0
1974 10.7
1975 7.9
1976 21.9
1977 12.5
1978 14.5
1979 9.2 
i. Enter the data into R. [Section 1.3.1 showed one way to do this. To save keystrokes, enter the successive
years as 1970:1979]

esnow <- data.frame(year=c(1970:1979), snow.cover=c(6.5, 12.0, 14.9, 10.0, 10.7, 7.9, 21.9, 12.5, 14.5, 9.2))

ii. plot snow.cover vs. year
NO plot(eu.snow.year, eu.snow.snow.cover)

NO plot(year, snow.cover)

plot(eu.snow)
works.

(d <- data.frame(cbind(x=1, y=1:10), fac=sample(L3, 10, replace=TRUE)))

year <- c(1970:1979); snow.cover <- c(6.5, 12.0, 14.9, 10.0, 10.7, 7.9, 21.9, 12.5, 14.5, 9.2);

3. enter and plot incident data for space shuttle orings:

Temperature Erosion Blowby Total
(F) incidents incidents incidents
53 3 2 5
57 1 0 1
63 1 0 1
70 1 0 1
70 1 0 1
75 0 2 1

orings <-
  data.frame(temp=c(53, 57, 63, 70, 70, 75),
             erosion=c(3, 1, 1, 1, 1, 0),
             blowby=c(2, 0, 0, 0, 0, 2),
             total=c(5, 1, 1, 1, 1, 1));


----------------------------------------------------------------

Wed Sep 22 16:46:08 PDT 2010

In preparation to use R in the ML class, brush up on my R usage.

Figure out how to change directories in R:
  setwd() and getwd()

To see the structure of data, use str:

> iris = read.table('iris.data', sep=",")
> str(iris)
'data.frame':	150 obs. of  5 variables:
 $ V1: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ V2: num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ V3: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ V4: num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ V5: Factor w/ 3 levels "Iris-setosa",..: 1 1 1 1 1 1 1 1 1 1 ...

R operators like sum, avg, mean all have options on how to handle unspecified values.

First 5 rows:

iris[1:5,]       # NB trailing comma
iris[1:5]        # gives the first 5 columns of all of the rows

the c operator is 'Combine values into a vector or list'.
  The output type is determined from the highest type of input values in the hierarchy:
    NULL < raw < logical < integer < real < complex < character < list < expression
  as a side effect, removes all attributes except 'names'.
    as.vector is a more reasonably named method to remove attributes and turn an array
      into a vector.

other interesting methods:
mean, median, sqrt, var

sample: takes a sample of the specified size from teh elements of x, either with or
  without replacement
    sample(x, size, replace = FALSE, prob = NULL)

    sample.int(n, size = n, replace = FALSE, prob = NULL)

seq: generate regular sequences

rep: replicate the values in x, n times
  > rep(1:4, 2)
  [1] 1 2 3 4 1 2 3 4

----------------------------------------------------------------

Mon Sep 27 14:51:50 PDT 2010

Intro to R, Ch 2: Simple Manipulations

2.1 Vector Assignment
<- and = are aliases in most contexts.  <- is preferred.

the function assign will also perform assignment
assign("x", c(10.4, 5.6))

<- can be thought of as a syntactic shortcut to the assign function.

2.2 Vector Arithmetic

arithmetic is performed elt by elt.  if the vectors are not of the same length, shorter
vectors are 'recycled' as often as need be to match the length of the longest vector.  In
particular, a constant is simply repeated.

sort() orders a vector.  See also order() and sort.list().

pmin() pmax(): parallel min and max.  returns a vector of length equal to the longest
argument that contains in each elt the smallest (largest) elt in that position in any of
the input vectors.

internally, all calculations are done a double precision real (complex) numbers.

To work with complex numbers, explicitly give a complex component:
use
  sqrt(-17+0i)
not
  sqrt(-17)

2.3 Generating Regular Sequences

: has high precedence and generates +- 1 intervals

seq() is a more general facility.
  by gives the increment, default 1
  seq(-5, 5, by=.2) -> s3
    gives a 51 element vector
  s4 <- seq(from=-5, length=51, by=.2)
    gives the same vector.
  the along=vector parameter, which must be given alone, generates the seq 1, 2 ... length(vector)

A related function is rep(); used to replicate an object in various complicated ways.

s5 <- rep(x, times=5) will put 5 end-to-end copies of x in s5
s6 <- rep(x, each=5)  repeats each elt of x 5 times before moving onto the next elt.

2.4 Logical Vectors

logical vectors may contain T, F or NA.

(T and F are variables which are initialized to TRUE and FALSE, and can be overwritten,
so code should always use TRUE and FALSE).

Logical vectors are generated by 'conditions'

temp <- x > 13
creates a vector of length(x) where each elt is the result of: x > 13

& == and
| == or
! == negation

logical vectors can be coerced into numeric expressions with F == 0, T == 1.

2.5  Missing Values

NA can be used for missing values.
is.na(x) gives: logical vector for each elt which is NA
  x == NA gives a vector of length x with all NA, since the expression involving NA is undecidable.
  typically, not what one wants.

NaN
  0/0

is.na(xx) is true for both NA and NaN values.
is.nan(xx) is only true for NaN

2.6 Character Vectors

?Quotes gives a full list of escapes in character vectors.

character vectors are frequently concatenated with c()

paste() takes an abitrary number of args and concatenates them one-by-one into character strings.
eg
  labels <- paste(c("X", "Y"), 1:10, sep="")
> labels
 [1] "X1"  "Y2"  "X3"  "Y4"  "X5"  "Y6"  "X7"  "Y8"  "X9"  "Y10"

NB the recycling of the shorter vector [X, Y] here.

Index Vectors

In general, one can select a subset of a vector by appending to the name of the vector an
'index vector' in square brackets.  In fact, any expression which evaluates to a vector
may have a subset selected in this fashion.

The index vector may be of 4 types:

1. A logical vector.  In this case, the index vector must be of the same length.
e.g.
  y <- x[!is.na(x)]
  gives every non-missing value of x in y.  y may be shorter than x.

2. A vector of positive integral quantities.
In this case, the values of the index vector must lie in the set: {1, 2, ... length(x)}.
The corresponding elts of the vector are selected and concatenated -- in that order -- in
the result.  The index vector may be any length; the result is of the same length as the
index vector.
Thus
  x[1:10]
gives the first 10 elts of x; x[52] gives the 52nd elt of x, etc.

3. A vector of negative integral quantities
Specifies the set of values to exclude, rather than include.
e.g.
  y <- x[-(1:5)]
  gives all but the first 5 values of x.

4. A vector of character strings.
This only applies when the indexed object has a 'names' attribute to identify its components.
Used to provide human readable names to values.
e.g.
> fruit <- c(5, 10, 1, 20)
> names(fruit) <- c("orange", "banana", "apple", "peach")
> lunch <- fruit[c("apple", "orange")]
> lunch
 apple orange 
     1      5 

An indexed expression can also be used as an lvalue.
Thus:
  x[is.na(x)] <- 0
  replaces all missing values with 0


2.8 Other types of Objects

Beside vectors, there are:

Matrices, or more generally arrays: are multi-dimensional vectors.
In fact, they _are_ vectors that can be indexed by 2 or more indices and will be printed
in special ways.

Factors provide a compact way to handle categorical data.

Lists are a general form of a vector where the elts need not all be of the same type;
list elts are often themselves vectors or lists.

Data frames are matrix-like structures in which the columns can be of different types.
Think of data frames as 'data matrices' with 1 row per observation.

Functions are objects.

3 Objects: modes and attributes

3.1  Intrinsic attributes: mode and length

'Atomic' structures, like vectors, contain the same 'mode' of data
(numeric [integer, real], complex, logical, character and raw).

The empty vector may still have a mode.
e.g: character(0) and numeric(0)

List objects have mode 'list'.
These are ordered sequences of objects which can individually be of any mode.
Lists may be recursive.

Other recursive structures are of mode: 'function' and 'expression'.

mode(x) and length(x) are defined for every object.

further properties of an object are usually provided with
attributes(object)

There is a large set of 'as.something' functions to coerce from one mode to another,
or to invest an object with some attribute or another.
The reader is directed to the help files to search this space.

3.2 Changing the length of an object

One may truncate or extend with missing values vectors by assignment:

  a <- a[2 * 1:5]
  makes a an object of length 5 of the values at the even indices 2 .. 10

  length(a) <- 3
  truncates a to its first 3 values

3.3 Getting and setting attributes

attributes(x) returns a list of all of the non-intrinsic attributes.
attr(x, name) returns a given named attribute.
These functions are rarely used in practice; conceptually though, this is how R works.

e.g
  attr(z, "dim") <- c(10, 10)
  allows z to be treated as if it were a 10x10 matrix.

3.4 The class of an object

All objects have a class; reported by the function 'class'.
For simple vectors, this is just the mode,
but matrix, array, factor and data.frame are other possible class values.

A special attribute known as the 'class' of the object is available for an OO style.
The class is referenced by generic functions, e.g., printing, plot, summary, ...

One can temporarily remove the class with unclass().

4. Ordered and unordered factors

A factor is a vector object used to specify a discrete classification (grouping) of the
elements of other vectors of the same length.  There are both ordered, and unordered
factors.  The main use of factors is with model formulae.

4.2 tapply() and ragged arrays

tapply applies a function, in this case mean() to each group of components in the first argument, grouped by the levels of the second argument:

> state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa", "qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas", "sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa", "sa", "act", "nsw", "vic", "vic", "act")
> incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)
> incmeans <- tapply(incomes, factor(state), mean)
> incmeans
     act      nsw       nt      qld       sa      tas      vic       wa 
44.50000 57.33333 55.50000 53.60000 55.00000 60.50000 56.00000 52.25000 

Ragged arrays: I dont understand this.

Ordered factors, where the problem domain suggests an ordering of the categories that is not
alphanumeric, can be given with ordered().


5 Arrays and Matrices

5.1 Arrays

An array can be considered a multiply subscripted collection of data.

A dimension vector is a vector of non-negative integers.  If its length == k,
then the array is k-dimensional.
Indexing is from 1 up to k.

A vector can be used by R as an array only if it has a dimension vector as its dim attribute.

The indexing is in 'column major order'.
e.g. if dim(a) <- c(3,4,2),
then a has 3 x 4 x 2 == 24 entries stored in the order
  a[1,1,1], a[2,1,1], a[3,1,1] ... a[2,4,2], a[3,4,2]
ie, the first subscript moves fastest, and the last subscript moves slowest.

5.2 Array Indexing

Individul elts of an array are indexed with square brackets, separated by commas.
More generally, subsections of an array may be specified with a sequence of 'index vectors' in place of subscripts.  However, any empty index vector gives the full range of that subscript.

So continuing with a from before, a[2,,] is a 4x2 array with dimension vector(4, 2) containing
  c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1], a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
in that order.

a[,,] gives the entire array and is equivalent to a alone.

If an array name is given with just 1 subscript or index vector, then the corresponding
values of the data vector are used; the dimension vector is ignored.  However, if the
single index is an array

----------------------------------------------------------------
Thu Sep 30 13:01:49 PDT 2010

ESS (Emacs Speaks Statistics) Notes
from: http://ess.r-project.org/Manual/ess.html

To start an R process, 
M-x R RET
use a prefix argument to specify command line arguments

Each R process is given its own buffer, named like this:

  * *R*                  14294  iESS [R]: run
  * *R:2*                  719  iESS [R:2]: run

Switch to any active ESS process with:
C-c C-k  (ess-request-a-process)

ESS provides completion over components of named lists accessed using the '$' notation,
to any level of nested lists.
This particularly useful for checking what components of a list object exist while
partway through entering the name;
type the object name, '$', <tab> to see a all the names of existing list components.

So given:

  str(p38)
  'data.frame':	10 obs. of  3 variables:
   $ ClassA: logi  TRUE TRUE TRUE TRUE TRUE FALSE ...
   $ ClassB: logi  FALSE TRUE TRUE FALSE TRUE FALSE ...
   $ Label : Factor w/ 2 levels "+","-": 1 1 1 2 1 2 2 2 2 2

the input:
  p38$<tab>
gives:
  Possible completions are:
  p38$ClassA
  p38$ClassB
  p38$Label

<tab> can complete filenames as well as history references.

M-x ess-resynch
reloads the internal symbol table used for completions.

4.4 Manipulating the transcript
M-{ and M-} move forward and backward commands in the ESS buffer.

M-h marks a 'paragraph'; ie, a command and all of its output.

One can host multiple ESS sessions in a single buffer; 
these are delimited by ^L
C-x [ and C-x ] move forward and backward to these 'pages'.

If there is a lot of ouput produced by a single command,
one can use

C-c C-e  (comint-show-maximum-output)
  Move to the end of the buffer, and put the cursor on the bottom line of the window

C-c C-r  (comint-show-output)
  Move cursor to previous command and position at the top line of the window

C-c C-o  (comint-kill-output)
  Delete everything from the last command to the current prompt

C-c C-p and C-c C-n move forward and backward commands.

One can also regex search with
  (comint-backward-matching-input regexp arg)
  (comint-forward-matching-input regexp arg)
for the arg'th matching regexp.  arg is the prefix argument.
regexp is prompted for in the minibuffer.

Reevaluating commands
(depending on transcript mode, which is enabled in a .St file)

In an *R* buffer
  RET  (inferior-ess-send-input)
    Copy command under the cursor and reexecute it
In a transcript buffer,
  RET or C-c M-j  (ess-transcript-send-command-and-move)
    Copy and execute the command under the cursor, then move to the next command.

C-c RET (comint-copy-old-input)
  Copy the command under cursor to the current command line, but don't execute it.
  Leave for editing.

Keeping a record of your session

C-x C-w  (write-file)
  will attach a file to the ESS session.  This can be saved as usual with C-x C-s.
  It is recommended to name transcript with suffix: .St
  There is an emacs-mode (Transcript Mode) for .St files.
  This mode enables many of the ess-transcript functions.

Recall
C-c C-o  to remove excessively long output

M-h C-w  delete erroneous commands and output

M-x ess-transcript-clean-region
  works in any emacs buffer (once ess-transcript has been loaded);
  removes all prompts and command output, leaving just the commands.

C-c C-r  (ess-eval-region)
  Sends the region as is to the ESS process

C-c M-r  (ess-eval-region-and-go)
  Same as ess-eval-region plus switches to the ESS buffer.


(start with 4.5: Command History)
http://ess.r-project.org/Manual/ess.html#Command-History

----------------------------------------------------------------

Thu Oct  7 12:20:09 PDT 2010

recommended R books from Stephen O'Connell <sao@saoconnell.com>  {
At this point the best overall coverage of R in the O'Reilly R in a Nutshell.  It has a fairly good introduction and covers top topics in data analysis with good examples.  The thing that I like about the book is the data is something you can understand, baseball stats.  Joe Adler also wrote the Baseball Hacks which uses R to get deep into baseball stats.

The Springer series of books has the best collection of R books.  If you have a background in stats, or want an intro, Introductory Statistics with R by Peter Dalagaard, can be useful to learn R with familiar statistical functions.  He doesn't go very deep and it is an intro to stats, but the examples are clear, and described well.

Details on working with the data is covered well in Data Manipulation with R, by Phil Spector.  He has good coverage of stuff that drives you crazy, like reading data in, addressing data structures, dealing with dates/time series, how to leverage Factors, and "reshaping" data.  It is a short book and pretty expensive, but is a good reference for the stuff that has driven me crazy "massaging the data."

There are three graphics in R:
- base graphics is well covered in R Graphics, by Paul Murrell.
- Lattice graphics, Lattice: Multivariate Data Visualization with R, Deepayan Sarkar.  Its not very well written or organized, but it is written by the guy who write the package, so once you "debug" his writing style this is the only graphics package for visualization of large datasets.
- ggplot2: Elegant Graphics for Data Analysis, Hadley Wickham.  Creates really nice graphs, lots of options, built in functions, but takes a while to use well.  It is also not very good for large datasets, it slows down with the size of data. Search the web for Hadley Wickham, he has a few videos where he reviews ggplot2 and reshape (another powerful package he wrote.)

Avoid buying Software for Data Analysis, John Chambers.  John is one of the original authors of S and worked on R development, considered one of the "father's" of stats computing, he is currently at Stanford.  This book as LOTS of prose and sparse on code samples, if you want to develop an R package this may be required reading, otherwise avoid.

All the Springer books are expensive, in my opinion, but they have the best collection of R books.

There are lots of videos on R in YouTube and http://www.vcasmo.com/user/drewconway is a collection of videos from R user group meetings around the country.  

}

----------------------------------------------------------------

plot notes from Introductory Stats with R, section 2.2

uniform distribution functions
(see ?runif)

     These functions provide information about the uniform distribution
     on the interval from 'min' to 'max'.  'dunif' gives the density,
     'punif' gives the distribution function 'qunif' gives the quantile
     function and 'runif' generates random deviates.

  Usage:

     dunif(x, min=0, max=1, log = FALSE)
     punif(q, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
     qunif(p, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
     runif(n, min=0, max=1)

A simple plot with added text and 2 lines:
(normally abline plots y = ax + b, but it can also draw the cross hair lines as shown.)
> plot(runif(50, 0, 2), runif(50, 0, 2), main="j1", sub="subtitle")
> text(0.6, 0.6, "text at 0.6, 0.6")
> abline(h=.6, v=.6)
 
margin coordinates are used by the mtext function. eg:
for (side in 1:4) mtext(-1:4, side=side, at=.7, line=-1:4)
mtext(paste("side", 1:4), side=1:4, line=-1, font=2)

font=2 means boldface.

To draw absolutely nothing, but establish the plotting surface for later work:
(x and y must be defined, in this example with:
x <- runif(50, 0, 2)
y <- runif(50, 0, 2)

plot(x, y, type="n", xlab="", ylab="", axes=FALSE)

then we can add the plot elements with, eg

points(x, y)
axis(1)
axis(2, at=seq(0.2, 1.8, 0.2))
box()
title(main="Main Title", sub="subtitle", xlab="x label", ylab="y label")

Sometimes you want to plot all of a set of groups once with type="n" to dimension the plot
area, then re-plot with colors, etc. the multiple data sets.

par() gives low level control over plotting parameters.
it is notably difficult to use.
some of the parameters can be specified both by plot() and by par().
  generally, when calling par() those parameters remain set for future plotting calls.
With par(), one can set:
  - line width and type
  - character size and font
  - color
  - style of axis calculation
  - size of the plot and figure regions
  - clipping
One can divide a figure into several subfigures with the mfrow and mfcol parameters.

the 'type' arg to plot takes values:
p     points
l     lines
b     both
c     ?
o     both lines and points overplotted
h     histogram like high-density vertical lines
s     stair steps
S     other steps
n     no plotting at all

To set the min and max values of, e.g., the Y axis from a result matrix,
one can do something like:

range(result[,1:2])
[1] 0.3815559 0.4583839

plot( ...  ylim=range(result[,1:2]) ... )

----

rbind
cbind
  combine R objects by rows or columns

----------------

Data Frames are implemented as lists, with a class of 'data.frame'.
So to add a new variable to a data frame, one can use hte '$' syntax.

> str(allSonar)
'data.frame':	208 obs. of  61 variables:
  ...
> allSonar$I1 <- seq(1:208)
> str(allSonar)
'data.frame':	208 obs. of  62 variables:
  ...

Since data frames are lists; one can also store data using the [[k]] notation:
> sonar[[62]] <- seq(1:120)
In this case, the variable is called 'V62'.
str(sonar)
  ...
 $ V62: int  1 2 3 4 5 6 7 8 9 10 ...


----------------

Chapter 6: R Syntax

the if conditional operator is not a vector operation.
A vector comparison will use only the first value of the vector:

  > x <- 10
  > y <- c(8, 10, 12, 3, 15)
  > if (x < y) x else y
  [1]  8 10 12  3 15
  Warning message:
  In if (x < y) x else y :
    the condition has length > 1 and only the first element will be used

loops

there are 3 loops in R:
repeat
while
for

  > i <- 5
  > repeat { if (i > 25) break else { print(i); i <- i + 5; } }
  [1] 5
  [1] 10
  [1] 15
  [1] 20
  [1] 25

N.B. that the iteration variable is reflected in the outer environment:

  > i <- 5; repeat { if (i > 25) break else { i <- i + 5; }}
  > i
  [1] 30

There are looping extensions on cran implement iterators and foreach.
The packages are named 'iterator' and 'foreach'.

----------------

Chapter 7: R Objects

Time Series objects are typically created with the ts function.

A shingle is a generalization of factor to apply to continuous variables.
Use extensively in the lattice package.

Dates.
as.Date() function typically used to convert from an ascii format, possibly with an origin
to a date object.

----------------

Chapter 8: Symbols and Environments

R is lexically scoped; and has the usual calling stack frame.
There are many functions to poke around in the environment:

assign       Assign a value to a name in an environment.
get          Search for an R object with a given name and return it.
exists       Look for an R object of the given name.
objects      ls and objects return a vector of character strings giving the names of the
             objects in the specified environment.
remove       delete symbols from the environment.
search       gives a list of 'attach'ed packages
attach       The database is attached to the R search path.
detach       
emptyenv     returns the empty environment: R_EmptyEnv; all envs chain back to this sentinel.
parent.env   returns the parent
baseenv      the environment of the base package
globalenv    functionally, or also via symbol .GlobalEnv
environment  returns the env for function fun, or the current env when fun == NULL
new.env      returns a new env
             



> x <- .GlobalEnv
> while (environmentName(x) != environmentName(emptyenv())) { print(environmentName(parent.env(x))); x<- parent.env(x)}
[1] "iris"
[1] "package:rpart"
[1] "package:e1071"
  ...
[1] "Autoloads"
[1] "base"
[1] "R_EmptyEnv"

Functions for manipulating the call frame:

sys.call     return a language object containing the current function call, including args
sys.frame    the calling env
sys.nframe   the position (integer) on the call stack
sys.function the function currently being evaluated
sys.on.exit  the expression used for on.exit for the current frame
parent.frame the parent frame
             and others: sys.parent, sys.calls, sys.frames, sys.parents, sys.status

Functions to evaluate code in other contexts:
eval
evalq        == eval(quote(expr), ...
eval.parent  == eval(expr, parent.frame(n))
local        == eval(quote(expr), envir=new.env(), ...)

There is also with and within, which expose symbols in a data frame or list:

> showme.list <- list(a=1, b=26, c=42);
> a+b+c
Error: object 'a' not found
> with(showme.list, a+b+c)
[1] 69
> within(showme.list, d <- a+b+c)
$a
[1] 1

$b
[1] 26

$c
[1] 42

$d
[1] 69

----
Exceptions
There are 3 functions to signal issues to users:
  stop
  warning
  message

There are also 
  try
  tryCatch
which add some semantics around error handling.

----------------

Chapter 9: Functions

----------------------------------------------------------------

Thu Dec  2 13:24:13 PST 2010

Notes from Introductory Statistics with R

Chap 1: Basics

One can use the args() function to get a list of the default formal arguments to any function:

> args(plot.default)
function (x, y = NULL, type = "p", xlim = NULL, ylim = NULL, 
    log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, 
    ann = par("ann"), axes = TRUE, frame.plot = axes, panel.first = NULL, 
    panel.last = NULL, asp = NA, ...) 
NULL
> args(lm)
function (formula, data, subset, weights, na.action, method = "qr", 
    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, 
    contrasts = NULL, offset, ...) 
NULL

R gives us numeric vectors, character vectors and logical vectors.

Character vectors:
ducks <- c('Huey', "Dewey", 'Louie')

Logical vectors:
> bmi > 25
[1] FALSE FALSE FALSE FALSE  TRUE FALSE

1.2.5 Missing Values

R allows missing values in vectors to be represented by NA.
Any operation with NA as an operand gives NA as the result.

1.2.6 Functions that create vectors

c, seq, and rep

One can name the args to a vector with c:

x <- c(red='Huey', green="Dewey", blue='Louie')

> x
    red   green    blue 
 "Huey" "Dewey" "Louie" 
> names(x)
[1] "red"   "green" "blue" 

All elts of a vector must have the same type.
If vectors are combined with different types, elts are coerced to the least restrictive type.

seq
seq is used to create vectors with equidistant points:
> seq(1.7, 1.9, by=0.05)
[1] 1.70 1.75 1.80 1.85 1.90

> seq(1.9, 1.7, by=-0.05)
[1] 1.90 1.85 1.80 1.75 1.70

the syntactic shortcut
x:y
is equivalent to
seq(x, y, by=1)

rep
rep is used to 'repeat' sequences.
It has 2 variants depending on whether the 2nd argument is a vector or a scalar.
If the 2nd arg is a scalar, it gives the repeat value for the whole vector:
> y <- c(7, 9, 13)
> rep(y, 3)
[1]  7  9 13  7  9 13  7  9 13

however, if the 2nd arg is a vector, each elt gives the repeat values for the corresponding elt:
> rep(y, 1:3)
[1]  7  9  9 13 13 13

so if we had a sample where we knew we had 10 of 1 value, and 18 of another,
we could do something like:

class <- rep(c(1,2), c(10, 18))
> class
 [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

in the common case where each class has the same number of elts, use each:
> rep(1:3, each=7)
 [1] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3

1.2.7 Matrices and Arrays

A matrix can be formed from an array by assigning dimensions to it:
> x <- 1:12
> dim(x) = c(3,4)
> x
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

NB column major order.

Use the matrix function to load in row order:
> x <- matrix(1:12, nrow=3, byrow=T)
> x
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    5    6    7    8
[3,]    9   10   11   12

rownames and colnames can give symbolic names:
> rownames(x) <- LETTERS[1:3]
> x
  [,1] [,2] [,3] [,4]
A    1    2    3    4
B    5    6    7    8
C    9   10   11   12

The transpose functions is called t():
> t(x)
     A B  C
[1,] 1 5  9
[2,] 2 6 10
[3,] 3 7 11
[4,] 4 8 12

Besides LETTERS, there are built-in variables:
> letters
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> month.name
 [1] "January"   "February"  "March"     "April"     "May"       "June"     
 [7] "July"      "August"    "September" "October"   "November"  "December" 
> month.abb
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"

1.2.8 Factors

pain <- c(0, 3, 2, 3, 3, 1)
fpain <- factor(pain, level=0:3)
levels(fpain) <- c('none', 'mild', 'moderate', 'severe')

> fpain
[1] none     severe   moderate severe   severe   mild    
Levels: none mild moderate severe
> as.numeric(fpain)
[1] 1 4 3 4 4 2

NB that R internally converted the factor levels to be 1-based.

1.2.9 Lists
Lists are collections that do not require all elts to be of the same type.

intake.pre  <- c(5260, 5470, 5640, 6180, 6390, 6515, 6805, 7515, 7515, 8230, 8770)
intake.post <- c(3910, 4220, 3885, 5160, 5645, 4680, 5265, 5975, 6790, 6900, 7335)

1.2.10 Data Frames
A data frame is a group of related vectors and/or factors all of the same length.
It has a unique set of row names.

d <- data.frame(intake.pre, intake.post)

d[5,]
gives all the data from the 5th observation:
> d[5,]
  intake.pre intake.post
5       6390        5645

or just the post energy:
> d[5,2]
[1] 5645

the head and tail functions show the first/last few lines (6 is the default):
> head(d)
  intake.pre intake.post
1       5260        3910
2       5470        4220
3       5640        3885
4       6180        5160
5       6390        5645
6       6515        4680
> tail(d)
   intake.pre intake.post
6        6515        4680
7        6805        5265
8        7515        5975
9        7515        6790
10       8230        6900
11       8770        7335

----

expend <- c(9.21, 7.53, 7.48, 8.08, 8.09, 10.15, 8.4, 10.88, 6.13, 7.9, 11.51, 12.79, 7.05, 11.85, 9.97, 7.48, 8.79, 9.69, 9.68, 7.58, 9.19, 8.11)
stature <- c(
'obese',
'lean',
'lean',
'lean',
'lean',
'lean',
'lean',
'lean',
'lean',
'lean',
'obese',
'obese',
'lean',
'obese',
'obese',
'lean',
'obese',
'obese',
'obese',
'lean',
'obese',
'lean')
energy <- data.frame(expend, stature)

The split function can group data:

> l <- split(energy.expend, energy.stature)
> l
$lean
 [1]  7.53  7.48  8.08  8.09 10.15  8.40 10.88  6.13  7.90  7.05  7.48  7.58
[13]  8.11

$obese
[1]  9.21 11.51 12.79 11.85  9.97  8.79  9.69  9.68  9.19

1.2.15 Implicit Loops

The common idiom of applying a function to every element (map) is provided by
lapply
sapply
lapply will always return a list, while sapply will attempt to 's'implify the result
to a vector or a matrix if possible.

E.g.
> lapply(thuesen, mean, na.rm=T)
$blood.glucose
[1] 10.3

$short.velocity
[1] 1.325652

> sapply(thuesen, mean, na.rm=T)
 blood.glucose short.velocity 
     10.300000       1.325652 

replicate will repeat an operation and collect the results as a vector:

> replicate(6, mean(rexp(20)))
[1] 1.0606478 1.0791211 0.8939013 1.3963584 1.0511253 0.7479053

1.2.16 Sorting

Suppose you wanted to sort the data by several variables, like the gender, then weight.
One can use the order() function to create an index vector, then index into the data
to get the sorted results:

> order(intake$post)
 [1]  3  1  2  6  4  7  5  8  9 10 11

o <- order(intake$post)
intake.pre[o]

> o <- order(intake$post)
> intake.pre[o]
 [1] 5640 5260 5470 6515 6180 6805 6390 7515 7515 8230 8770

so this is the pre intake numbers sorted in order of the post intake values.
One can give multiple args to order to specify multiple column sorting.
